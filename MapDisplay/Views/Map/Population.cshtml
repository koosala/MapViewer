
@{
    ViewBag.Title = "Population";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset=utf-8 />
    <title>Choropleth</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.mapbox.com/mapbox.js/v2.2.1/mapbox.js'></script>
    <link href='https://api.mapbox.com/mapbox.js/v2.2.1/mapbox.css' rel='stylesheet' />
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }
    </style>
</head>
<body>
    <div id='map'></div>

    <style>
        .map-legend .swatch {
            width: 20px;
            height: 20px;
            float: left;
            margin-right: 10px;
        }

        .leaflet-popup-close-button {
            display: none;
        }

        .leaflet-popup-content-wrapper {
            pointer-events: none;
        }
    </style>
    <script src='/data/us-states.js'></script>
    <script src='/data/us-counties.js'></script>
    <script>
        L.mapbox.accessToken = 'pk.eyJ1Ijoia29vc2FsYSIsImEiOiJkOTQ2ZmRlNjk5NDJhNzJlNTgzM2I1MTMzMTdhNWQwMSJ9.6TpJdyOIqgzL4_VVfwvguQ';
        var map = L.mapbox.map('map', 'mapbox.streets')
    .setView([37.8, -96], 4);

  var popup = new L.Popup({ autoPan: false });

  // statesData comes from the 'us-states.js' script included above
  var statesLayer = L.geoJson(statesData,  {
      style: getStyle,
      onEachFeature: onEachFeature
  }).addTo(map);

  function getStyle(feature) {
      return {
          weight: 2,
          opacity: 0.1,
          color: 'black',
          fillOpacity: 0.7,
          fillColor: getColor(feature.properties.density)
      };
  }

  // get color depending on population density value
  function getColor(d) {
      return d > 1000 ? '#8c2d04' :
          d > 500  ? '#cc4c02' :
          d > 200  ? '#ec7014' :
          d > 100  ? '#fe9929' :
          d > 50   ? '#fec44f' :
          d > 20   ? '#fee391' :
          d > 10   ? '#fff7bc' :
          '#ffffe5';
  }

  function onEachFeature(feature, layer) {
      layer.on({
          mousemove: mousemove,
          mouseout: mouseout,
          click: zoomToFeature
      });
  }

  function onEachCountyFeature(feature, layer) {
      layer.on({
          mousemove: countyMouseMove,
      });
  }

  function countyMouseMove(e) {
      var layer = e.target;
      showToolTip(e, layer, layer.feature.properties.NAME, "");
  }

  var closeTooltip;

  var zoomedIn = false;
  function mousemove(e) {
      var layer = e.target;
      showToolTip(e, layer, layer.feature.properties.name, layer.feature.properties.density);

  }
  function showToolTip(e, layer, text, secondText) {

      popup.setLatLng(e.latlng);
      popup.setContent('<div class="marker-title">' + text + '</div>' +
          secondText + ' people per square mile');

      if (!popup._map) popup.openOn(map);
      window.clearTimeout(closeTooltip);

      // highlight feature
      layer.setStyle({
          weight: 3,
          opacity: 0.3,
          fillOpacity: 0.9
      });

      if (!L.Browser.ie && !L.Browser.opera) {
          layer.bringToFront();
      }
  }

  function mouseout(e) {
      statesLayer.resetStyle(e.target);
      closeTooltip = window.setTimeout(function() {
          map.closePopup();
      }, 100);
  }
  var countyLayer = null;
  var eastCoastLayer = null;

  function zoomToFeature(e) {
      map.fitBounds(e.target.getBounds());
      if (eastCoastLayer === null) {
          eastCoastLayer = L.mapbox.featureLayer()
    .loadURL('/data/eastcoast_cities.json')
    .addTo(map);
      }
            eastCoastLayer.setFilter(function (f) {
                return f.properties["STATE"] === e.target.feature.id;
            });

      if (countyLayer === null) {
          countyLayer = L.mapbox.featureLayer()
          .loadURL('/data/counties.json').addTo(map);

      }
      countyLayer.setFilter(function (f) {
          return f.properties["STATE"] === e.target.feature.id;
      });


      zoomedIn = true;
  }

  map.legendControl.addLegend(getLegendHTML());

  function getLegendHTML() {
    var grades = [0, 10, 20, 50, 100, 200, 500, 1000],
    labels = [],
    from, to;

    for (var i = 0; i < grades.length; i++) {
      from = grades[i];
      to = grades[i + 1];

      labels.push(
        '<li><span class="swatch" style="background:' + getColor(from + 1) + '"></span> ' +
        from + (to ? '&ndash;' + to : '+')) + '</li>';
    }

    return '<span>People per square mile</span><ul>' + labels.join('') + '</ul>';
  }
    </script>
</body>
</html>